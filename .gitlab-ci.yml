stages:
  - prepare
  - build
  - db
  - runtime
  - scinlp
  - test
  - deploy
  - clean
  - clean_db
  - clean_branches
  - autotest
  - push-to-github

prepare_webui:
  stage: prepare
  image: bitnami/git
  script:
    - echo "REPO_URL=588200329560.dkr.ecr.eu-west-1.amazonaws.com" >> prepare.env
    # - echo "IMAGE_NAME=webui" >> prepare.env
    - echo LAST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`) >> prepare.env
    - echo IMAGE_TAG=$CI_JOB_ID >> prepare.env
    # - echo IMAGE_TAG=$LAST_TAG-$CI_JOB_ID >> prepare.env
    - echo UI_RELEASE_NAME=$(grep -E '^name:' devops/helm-charts/webui/Chart.yaml | awk '{print $2}') >> prepare.env
    - echo POSTGREST_RELEASE_NAME=$(grep -E '^name:' devops/helm-charts/postgrest/Chart.yaml | awk '{print $2}') >> prepare.env
    - echo ENV=$(echo $CI_COMMIT_REF_NAME | tr -dc '[:alnum:]\n\r' | tr '[:upper:]' '[:lower:]') >> prepare.env
    - export ENV=$(echo $CI_COMMIT_REF_NAME | tr -dc '[:alnum:]\n\r' | tr '[:upper:]' '[:lower:]') >> prepare.env
    - echo NAMESPACE = reclada-$ENV >> prepare.env
    - echo DBNAME = "${ENV}_reclada_k8s" >> prepare.env 
    - echo LAMBDA_NAME = "s3_get_presigned_url_${ENV}" >> prepare.env
    - echo TEST_PARAMETERS_WEB_BASE_URL = "${ENV}.reclada.com" >> prepare.env
  artifacts:
    reports:
      dotenv: prepare.env
  rules:
    - if: $CI_COMMIT_REF_NAME == "main"
      when: always
    - if: $CI_COMMIT_REF_NAME !~ /^dynamic/ && $CI_MERGE_REQUEST_ID =~ /^./ && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main" && $CI_COMMIT_MESSAGE !~ /^delenv/
      when: always
    - if: $CI_COMMIT_REF_NAME !~ /^dynamic/ && $CI_MERGE_REQUEST_ID =~ /^./ && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "test" && $CI_COMMIT_MESSAGE !~ /^delenv/
      when: always
    - if: $CI_COMMIT_REF_NAME !~ /^dynamic/ 
      when: never
    - if: $CI_COMMIT_REF_NAME =~ /^dynamic/ 
      when: always
    - if: $CI_COMMIT_REF_NAME == "test"
      when: never
  tags:
    - k8s-devops

build_webui:
  stage: build
  image: 588200329560.dkr.ecr.eu-west-1.amazonaws.com/kaniko:v1.3.0-0-debug
  script:
    /kaniko/executor -f $CI_PROJECT_DIR/devops/docker/webui/Dockerfile -c $CI_PROJECT_DIR --insecure --skip-tls-verify --cache=false --destination $REPO_URL/webui:$IMAGE_TAG --destination $REPO_URL/webui:latest
  needs:
    - job: prepare_webui
      artifacts: true
  rules:
    - if: $CI_COMMIT_REF_NAME == "main"
      when: always
    - if: $CI_COMMIT_MESSAGE =~ /^delenv/
      when: never
    - if: $CI_COMMIT_REF_NAME !~ /^dynamic/ && $CI_MERGE_REQUEST_ID =~ /^./ && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main" && $CI_COMMIT_MESSAGE !~ /^delenv/
      when: always
    - if: $CI_COMMIT_REF_NAME !~ /^dynamic/ && $CI_MERGE_REQUEST_ID =~ /^./ && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "test" && $CI_COMMIT_MESSAGE !~ /^delenv/
      when: always
    - if: $CI_COMMIT_REF_NAME !~ /^dynamic/ 
      when: never
    - if: $CI_COMMIT_REF_NAME =~ /^dynamic/ && $CI_COMMIT_MESSAGE !~ /^delenv/
      when: always
    - if: $CI_COMMIT_REF_NAME == "test"
      when: never
  tags:
    - k8s-devops


test-dynamic-env:
  stage: test
  # image: ???
  script:
    - echo "Run some test before deploy to dynamic env"
  needs:
    - job: build_webui
    - job: prepare_webui
      artifacts: true
  tags:
    - k8s-devops
  rules:
  - if: $CI_COMMIT_MESSAGE =~ /^delenv/
    when: never
  - if: $CI_MERGE_REQUEST_ID =~ /^./ 
    when: never
  - if: $CI_COMMIT_REF_NAME !~ /^dynamic/ 
    when: never
  - if: $CI_COMMIT_REF_NAME =~ /^dynamic/ && $CI_COMMIT_MESSAGE !~ /^delenv/
    when: always
  - if: $CI_COMMIT_REF_NAME == "main"
    when: never
  - if: $CI_COMMIT_REF_NAME == "test"
    when: never

k8s-dynamic-env:
  stage: deploy
  image: 588200329560.dkr.ecr.eu-west-1.amazonaws.com/helm-kubectl:v1.0.0-0
  script:
    - echo "Copy secret for basic auth from prod environment"
    - kubectl get secret dev-secret --namespace=reclada-prod -o yaml | sed "s|namespace:.*|namespace:\ $NAMESPACE|" | kubectl apply -f - || true

    - sed -i "s|dynamicenvname|$ENV|g" $CI_PROJECT_DIR/devops/helm-charts/postgrest/vars/template.yaml
    - cat $CI_PROJECT_DIR/devops/helm-charts/postgrest/vars/template.yaml
    - helm upgrade --install --debug --wait --timeout 600s --create-namespace -n $NAMESPACE -f $CI_PROJECT_DIR/devops/helm-charts/postgrest/values.yaml -f $CI_PROJECT_DIR/devops/helm-charts/postgrest/vars/template.yaml --set image.tag=v7.0.1-1 $POSTGREST_RELEASE_NAME devops/helm-charts/postgrest/
    
    - echo "********"

    - sed -i "s|dynamicenvname|$ENV|g" $CI_PROJECT_DIR/devops/helm-charts/webui/vars/template.yaml
    - cat $CI_PROJECT_DIR/devops/helm-charts/webui/vars/template.yaml
    - helm upgrade --install --debug --wait --timeout 600s --create-namespace -n $NAMESPACE -f $CI_PROJECT_DIR/devops/helm-charts/webui/values.yaml -f $CI_PROJECT_DIR/devops/helm-charts/webui/vars/template.yaml --set image.tag=$IMAGE_TAG $UI_RELEASE_NAME devops/helm-charts/webui/

  needs:
    - job: test-dynamic-env
    - job: build_webui
    - job: prepare_webui
      artifacts: true
  tags:
    - k8s-devops
  rules:
  - if: $CI_COMMIT_MESSAGE =~ /^delenv/
    when: never
  - if: $CI_MERGE_REQUEST_ID =~ /^./ 
    when: never
  - if: $CI_COMMIT_REF_NAME !~ /^dynamic/ 
    when: never
  - if: $CI_COMMIT_REF_NAME =~ /^dynamic/
    when: always
  - if: $CI_COMMIT_REF_NAME == "main"
    when: never
  - if: $CI_COMMIT_REF_NAME == "test"
    when: never


prepare_db:
  stage: db
  image: 588200329560.dkr.ecr.eu-west-1.amazonaws.com/curljq:01
  script:
    - curl --version
    - jq --version
    - echo $DB_REPO_TOKEN
    - echo $CI_COMMIT_REF_NAME
    #Create db with the same name prefix as current branch 
    - curl --request POST --header "PRIVATE-TOKEN:$DB_REPO_TOKEN" "https://gitlab.reclada.com/api/v4/projects/34/repository/branches?branch=$CI_COMMIT_REF_NAME&ref=main" | jq
    # Check pipeline sussess for current branch in runtime repository 
    - sleep 60
    - export response="pending"
    - while [ $response != "success" ] && [ $response != "failed" ]; do sleep 5 ; echo "WATING FOR PIPELINE" ; response=$(curl --header "PRIVATE-TOKEN:$DB_REPO_TOKEN" "https://gitlab.reclada.com/api/v4/projects/34/pipelines?per_page=1&page=1" | jq -r '.[].status') ; echo $response ; done ;
  needs:
    - job: prepare_webui
      artifacts: true
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /^delenv/
      when: never
    - if: $CI_COMMIT_REF_NAME !~ /^dynamic/ && $CI_MERGE_REQUEST_ID =~ /^./ && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"
      when: never
    - if: $CI_COMMIT_REF_NAME !~ /^dynamic/ && $CI_MERGE_REQUEST_ID =~ /^./ && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "test"
      when: never
    - if: $CI_COMMIT_REF_NAME !~ /^dynamic/ 
      when: never
    - if: $CI_COMMIT_REF_NAME =~ /^dynamic/ && $CI_COMMIT_MESSAGE !~ /^delenv/ && $CI_MERGE_REQUEST_ID !~ /^./ 
      when: always
    - if: $CI_COMMIT_REF_NAME == "main"
      when: never
    - if: $CI_COMMIT_REF_NAME == "test"
      when: never
  tags:
    - k8s-devops


prepare_runtime:
  stage: runtime
  image: 588200329560.dkr.ecr.eu-west-1.amazonaws.com/curljq:01
  script:
    - curl --version
    - jq --version
    - echo $RUNTIME_REPO_TOKEN
    - echo $CI_COMMIT_REF_NAME
    #Create db with the same name prefix as current branch
    - curl --request POST --header "PRIVATE-TOKEN:$RUNTIME_REPO_TOKEN" "https://gitlab.reclada.com/api/v4/projects/36/repository/branches?branch=$CI_COMMIT_REF_NAME&ref=main" | jq
    # Check pipeline sussess for current branch in runtime repository 
    - sleep 60
    - while [ $response != "success" ] && [ $response != "failed" ]; do sleep 5 ; echo "WATING FOR PIPELINE" ; response=$(curl --header "PRIVATE-TOKEN:$RUNTIME_REPO_TOKEN" "https://gitlab.reclada.com/api/v4/projects/36/pipelines?per_page=1&page=1" | jq -r '.[].status') ; echo $response ; done ;

  needs:
    - job: prepare_db
    - job: prepare_webui
      artifacts: true
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /^delenv/
      when: never
    - if: $CI_COMMIT_REF_NAME !~ /^dynamic/ && $CI_MERGE_REQUEST_ID =~ /^./ && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"
      when: never
    - if: $CI_COMMIT_REF_NAME !~ /^dynamic/ && $CI_MERGE_REQUEST_ID =~ /^./ && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "test"
      when: never
    - if: $CI_COMMIT_REF_NAME !~ /^dynamic/ 
      when: never
    - if: $CI_COMMIT_REF_NAME =~ /^dynamic/ && $CI_COMMIT_MESSAGE !~ /^delenv/ && $CI_MERGE_REQUEST_ID !~ /^./ 
      when: always
    - if: $CI_COMMIT_REF_NAME == "main"
      when: never
    - if: $CI_COMMIT_REF_NAME == "test"
      when: never
  tags:
    - k8s-devops


prepare_scinlp:
  stage: scinlp
  image: 588200329560.dkr.ecr.eu-west-1.amazonaws.com/curljq:01
  script:
    - curl --version
    - jq --version
    - echo $CI_COMMIT_REF_NAME
    #Create db with the same name prefix as current branch
    - curl --request POST --header "PRIVATE-TOKEN:$SCINLP_REPO_TOKEN" "https://gitlab.reclada.com/api/v4/projects/37/repository/branches?branch=$CI_COMMIT_REF_NAME&ref=main" | jq
    # Check pipeline sussess for current branch in runtime repository 
    - sleep 60
    - while [ $response != "success" ] && [ $response != "failed" ]; do sleep 5 ; echo "WATING FOR PIPELINE" ; response=$(curl --header "PRIVATE-TOKEN:$SCINLP_REPO_TOKEN" "https://gitlab.reclada.com/api/v4/projects/37/pipelines?per_page=1&page=1" | jq -r '.[].status') ; echo $response ; done ;

  needs:
    - job: prepare_db
    - job: prepare_runtime
      artifacts: true
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /^delenv/
      when: never
    - if: $CI_COMMIT_REF_NAME !~ /^dynamic/ && $CI_MERGE_REQUEST_ID =~ /^./ && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"
      when: never
    - if: $CI_COMMIT_REF_NAME !~ /^dynamic/ && $CI_MERGE_REQUEST_ID =~ /^./ && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "test"
      when: never
    - if: $CI_COMMIT_REF_NAME !~ /^dynamic/ 
      when: never
    - if: $CI_COMMIT_REF_NAME =~ /^dynamic/ && $CI_COMMIT_MESSAGE !~ /^delenv/ && $CI_MERGE_REQUEST_ID !~ /^./ 
      when: always
    - if: $CI_COMMIT_REF_NAME == "main"
      when: never
    - if: $CI_COMMIT_REF_NAME == "test"
      when: never
  tags:
    - k8s-devops

delete-k8s-dynamic-env:
  stage: clean
  image: 588200329560.dkr.ecr.eu-west-1.amazonaws.com/helm-kubectl:v1.0.0-0
  script:
    - echo "Uninstall helm charts and k8s namespcase"
    - helm uninstall webui -n $NAMESPACE || true
    - helm uninstall postgrest -n $NAMESPACE || true
    - helm uninstall sshfs -n $NAMESPACE
    - helm uninstall coordinator -n $NAMESPACE
    - kubectl delete ns $NAMESPACE
  needs:
    - job: prepare_webui
      artifacts: true
  rules:
    - if: $CI_MERGE_REQUEST_ID =~ /^./ 
      when: never
    - if: $CI_COMMIT_REF_NAME !~ /^dynamic/ 
      when: never
    - if: $CI_COMMIT_REF_NAME =~ /^dynamic/ && $CI_COMMIT_MESSAGE =~ /^delenv/ && $CI_MERGE_REQUEST_ID !~ /^./
      when: always
    - if: $CI_COMMIT_REF_NAME == "main"
      when: never
    - if: $CI_COMMIT_REF_NAME == "test"
      when: never
  tags:
    - k8s-devops


delete-terraform-dynamic-env:
  stage: clean
  image: 588200329560.dkr.ecr.eu-west-1.amazonaws.com/aws-build:v1.0.0-0
  script:
    - echo "Uninstall lambda/S3"
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.reclada.com/developers/reclada-runtime.git
    - cd $CI_PROJECT_DIR/reclada-runtime/devops/terraform/
    - sed -i "s|PGPASSWORD|$PG_PASSWORD|g" $CI_PROJECT_DIR/reclada-runtime/devops/terraform/variables.tf
    - sed -i "s|ENVPREFIX|$ENV|g" $CI_PROJECT_DIR/reclada-runtime/devops/terraform/variables.tf
    - sed -i "s|RDSINSTANCE|dev-reclada-k8s.c9lpgtggzz0d.eu-west-1.rds.amazonaws.com|g" $CI_PROJECT_DIR/reclada-runtime/devops/terraform/variables.tf
    - cat $CI_PROJECT_DIR/reclada-runtime/devops/terraform/variables.tf
    - ./terraform init
    - ./terraform workspace list
    - ./terraform workspace select ${ENV} || ./terraform workspace new ${ENV}
    - ./terraform destroy -target=aws_s3_bucket_notification.bucket_notification -auto-approve
    - ./terraform destroy -target=aws_lambda_permission.allow_bucket -auto-approve
    - ./terraform destroy -target=aws_s3_bucket_object.output_folder -auto-approve
    - ./terraform destroy -target=aws_s3_bucket_object.inbox_folder -auto-approve
    - ./terraform destroy -target=aws_s3_bucket_policy.AllowPublicRead -auto-approve
    - ./terraform destroy -target=aws_s3_bucket.bucket -auto-approve
    - ./terraform destroy -target=aws_lambda_function.s3_create_datasource_in_db -auto-approve
    - ./terraform destroy -target=aws_iam_role.iam_for_lambda -auto-approve
    - ./terraform destroy -target=module.lambda_function -auto-approve    
  needs:
    - job: prepare_webui
      artifacts: true
  rules:
    - if: $CI_MERGE_REQUEST_ID =~ /^./ 
      when: never
    - if: $CI_COMMIT_REF_NAME !~ /^dynamic/ 
      when: never
    - if: $CI_COMMIT_REF_NAME =~ /^dynamic/ && $CI_COMMIT_MESSAGE =~ /^delenv/ && $CI_MERGE_REQUEST_ID !~ /^./ 
      when: always
    - if: $CI_COMMIT_REF_NAME == "main"
      when: never
    - if: $CI_COMMIT_REF_NAME == "test"
      when: never
  tags:
    - k8s-devops

delete-db-dynamic-env:
  stage: clean_db
  image: 588200329560.dkr.ecr.eu-west-1.amazonaws.com/db-installer:0.1
  script:
    - echo "Uninstall db"
    - echo $CI_COMMIT_MESSAGE
    - psql -h dev-reclada-k8s.c9lpgtggzz0d.eu-west-1.rds.amazonaws.com -p 5432 -U reclada -d postgres -c "DROP DATABASE $ENV_reclada_k8s;" || true
  needs:
    - job: delete-terraform-dynamic-env
    - job: delete-k8s-dynamic-env
    - job: prepare_webui
      artifacts: true
  rules:
    # - if: $CI_COMMIT_MESSAGE =~ /^delenv/
    #   when: always
    - if: $CI_MERGE_REQUEST_ID =~ /^./ 
      when: never
    - if: $CI_COMMIT_REF_NAME !~ /^dynamic/ 
      when: never
    - if: $CI_COMMIT_REF_NAME =~ /^dynamic/ && $CI_COMMIT_MESSAGE =~ /^delenv/
      when: always
    - if: $CI_COMMIT_REF_NAME == "main"
      when: never
    - if: $CI_COMMIT_REF_NAME == "test"
      when: never
  tags:
    - k8s-devops

delete-branches-dynamic-env:
  stage: clean_branches
  image: 588200329560.dkr.ecr.eu-west-1.amazonaws.com/curljq:01
  script:
    - curl --version
    - jq --version
    - echo $RUNTIME_REPO_TOKEN
    - echo $CI_COMMIT_REF_NAME
  #Clean branch in reclada-runtime repository
    - curl --request DELETE --header "PRIVATE-TOKEN:$RUNTIME_REPO_TOKEN" "https://gitlab.reclada.com/api/v4/projects/36/repository/branches/${CI_COMMIT_REF_NAME//\//%2F}" | jq
  #Clean branch in scinlp repository
    - curl --request DELETE --header "PRIVATE-TOKEN:$SCINLP_REPO_TOKEN" "https://gitlab.reclada.com/api/v4/projects/37/repository/branches/${CI_COMMIT_REF_NAME//\//%2F}" | jq
  #Clean branch in db repository
    - curl --request DELETE --header "PRIVATE-TOKEN:$DB_REPO_TOKEN" "https://gitlab.reclada.com/api/v4/projects/34/repository/branches/${CI_COMMIT_REF_NAME//\//%2F}" | jq
  needs:
    - job: delete-terraform-dynamic-env
    - job: delete-k8s-dynamic-env
    - job: delete-db-dynamic-env
    - job: prepare_webui
      artifacts: true
  rules:
    # - if: $CI_COMMIT_MESSAGE =~ /^delenv/
    #   when: always
    - if: $CI_MERGE_REQUEST_ID =~ /^./ 
      when: never
    - if: $CI_COMMIT_REF_NAME !~ /^dynamic/ 
      when: never
    - if: $CI_COMMIT_REF_NAME =~ /^dynamic/ && $CI_COMMIT_MESSAGE =~ /^delenv/
      when: always
    - if: $CI_COMMIT_REF_NAME == "main"
      when: never
    - if: $CI_COMMIT_REF_NAME == "test"
      when: never
  tags:
    - k8s-devops


deploy-autotest-env:
  stage: deploy
  image: 588200329560.dkr.ecr.eu-west-1.amazonaws.com/helm-kubectl:v1.0.0-0
  script:
    - echo "Run update webui in autotest env"
    - echo "Copy secret for basic auth from prod environment"
    - kubectl get secret dev-secret --namespace=reclada-prod -o yaml | sed "s|namespace:.*|namespace:\ reclada-autotest|" | kubectl apply -f - || true

    - helm upgrade --install --debug --wait --timeout 600s --create-namespace -n reclada-autotest -f $CI_PROJECT_DIR/devops/helm-charts/postgrest/values.yaml -f $CI_PROJECT_DIR/devops/helm-charts/postgrest/vars/autotest.yaml --set image.tag=v7.0.1-1 $POSTGREST_RELEASE_NAME devops/helm-charts/postgrest/
    
    - echo "********"

    - helm upgrade --install --debug --wait --timeout 600s --create-namespace -n reclada-autotest -f $CI_PROJECT_DIR/devops/helm-charts/webui/values.yaml -f $CI_PROJECT_DIR/devops/helm-charts/webui/vars/autotest.yaml --set image.tag=$IMAGE_TAG $UI_RELEASE_NAME devops/helm-charts/webui/
  needs:
    - job: build_webui
    - job: prepare_webui
      artifacts: true
  tags:
      - k8s-devops
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /^delenv/
      when: never
    - if: $CI_MERGE_REQUEST_ID =~ /^./ && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "test"
      when: always
    - if: $CI_COMMIT_REF_NAME !~ /^dynamic/ 
      when: never
    - if: $CI_COMMIT_REF_NAME =~ /^dynamic/
      when: never
    - if: $CI_COMMIT_REF_NAME == "main"
      when: never
    - if: $CI_COMMIT_REF_NAME == "test"
      when: never

test-autotest-env:
  stage: autotest
  image: 588200329560.dkr.ecr.eu-west-1.amazonaws.com/pytest:04
  script:
    - echo "Run some tests for autotest env"

    - export TEST_PARAMETERS_BUCKET="autotest-reclada-bucket"
    - export TEST_PARAMETERS_DATABASE="${TEST_RDS}/autotest_reclada_k8s"
    - export TEST_PARAMETERS_DATABASE_USER="reclada"
    - export TEST_PARAMETERS_DATABASE_PASSWORD="${PG_PASSWORD}"

    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.reclada.com/developers/QAAutotests.git
    - cd QAAutotests

    - pytest --version
    - allure --version

    - pytest tests --alluredir allure-results > /dev/null 2>&1 || true
    - allure generate -c ./allure-results -o ./allure-report
    - ls -la ./allure-results
    - ls -la ./allure-report
  allow_failure: true
  artifacts:
    when: always
    paths:
      - QAAutotests/allure-results/
      - QAAutotests/allure-report/
    expire_in: 7 day
  needs:
    - job: deploy-autotest-env
    - job: prepare_webui
      artifacts: true
  tags:
      - k8s-devops
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /^delenv/
      when: never
    - if: $CI_MERGE_REQUEST_ID =~ /^./ && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "test"
      when: always
    - if: $CI_COMMIT_REF_NAME !~ /^dynamic/ 
      when: never
    - if: $CI_COMMIT_REF_NAME =~ /^dynamic/
      when: never
    - if: $CI_COMMIT_REF_NAME == "main"
      when: never
    - if: $CI_COMMIT_REF_NAME == "test"
      when: never

deploy-prod-env:
  stage: deploy
  image: 588200329560.dkr.ecr.eu-west-1.amazonaws.com/helm-kubectl:v1.0.0-0
  script:
    - echo "Run update webui in prod env"
    - helm upgrade --install --debug --wait --timeout 600s --create-namespace -n reclada-prod -f $CI_PROJECT_DIR/devops/helm-charts/postgrest/values.yaml -f $CI_PROJECT_DIR/devops/helm-charts/postgrest/vars/prod.yaml --set image.tag=v7.0.1-1 $POSTGREST_RELEASE_NAME devops/helm-charts/postgrest/
    - echo "********"
    - helm upgrade --install --debug --wait --timeout 600s --create-namespace -n reclada-prod -f $CI_PROJECT_DIR/devops/helm-charts/webui/values.yaml -f $CI_PROJECT_DIR/devops/helm-charts/webui/vars/prod.yaml --set image.tag=$IMAGE_TAG $UI_RELEASE_NAME devops/helm-charts/webui/
  needs:
    - job: build_webui
    - job: prepare_webui
      artifacts: true
  tags:
      - k8s-devops
  rules:
    - if: $CI_COMMIT_REF_NAME == "main"
      when: always
    - if: $CI_COMMIT_MESSAGE =~ /^delenv/
      when: never
    - if: $CI_MERGE_REQUEST_ID =~ /^./ && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "test"
      when: never
    - if: $CI_COMMIT_REF_NAME !~ /^dynamic/ 
      when: never
    - if: $CI_COMMIT_REF_NAME =~ /^dynamic/
      when: never
    - if: $CI_COMMIT_REF_NAME == "test"
      when: never

push-to-github:
  stage: push-to-github
  image: bitnami/git
  script:
    - echo "Run push to github"
    - git remote set-url origin https://gitlab:${MY_GITHUB_TOKEN}@github.com/reclada/${CI_PROJECT_NAME}.git
    - rm -rf .gitlab-ci.yml
    - rm -rf devops/
    - git config --global user.email "Gitlab@reclada.com"
    - git config --global user.name "Gitlab runner"
    - git add .
    - git commit -am "${CI_COMMIT_MESSAGE}"
    - git remote --verbose
    - git push origin HEAD:$CI_COMMIT_REF_NAME --force
  needs:
    - job: build_webui
    - job: prepare_webui
      artifacts: true
  tags:
      - k8s-devops
  rules:
    - if: $CI_COMMIT_REF_NAME == "main"
      when: always
    - if: $CI_MERGE_REQUEST_ID =~ /^./ && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "test"
      when: never
    - if: $CI_MERGE_REQUEST_ID =~ /^./ && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"
      when: never
    - if: $CI_COMMIT_REF_NAME !~ /^dynamic/ 
      when: never
    - if: $CI_COMMIT_REF_NAME =~ /^dynamic/
      when: never
    - if: $CI_COMMIT_REF_NAME == "test"
      when: never
