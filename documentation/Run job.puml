@startuml
'https://plantuml.com/sequence-diagram

skinparam sequenceMessageAlign center
'autonumber

actor       User       as user
database    "AWS S3"    as s3
database    Database  as db
participant Coordinator as coordinator
participant "BadgerDoc\n Job Runner" as runner

user -> s3: put document to
s3 -> db: trigger 'new file found'\n by AWS lambda

activate db
db -> db: create new datasource\n for the file
db -> db: create new **ParseFilePipeline job**\n param: file datasource id
db -> coordinator: **ParseFilePipeline job**
deactivate db

activate coordinator
coordinator -> coordinator: create graph\n of pipeline tasks\nf.e. only one task: BadgerDocTask
coordinator -> db: **ParseFilePipeline job**\n unpdate status: **InProgress**
coordinator -> db: create new **BadgerDoc job**\n from BadgerDocTask\n in status **Pending**
coordinator --> runner: run **BadgerDoc job** \n param: dataSourceId
activate runner

coordinator -> db: **BadgerDoc job**\n update status: **inProgress**
deactivate coordinator
db -> runner: get document url by datasourceId
s3 -> runner: get document by url
runner -> runner: parse document\n keep logs \n generate **results json**
runner -> db: create datasource for **results json**
activate db
db -> s3: save **results json**
db -> runner: return dataSourceId
deactivate db
runner -> coordinator: job done\n return resulting datasourceId
deactivate runner

activate coordinator
coordinator -> db: **BadgerDoc job**\n update status: **Success**\n update job result: dataSourceId
coordinator -> coordinator: check no more tasks\n in **ParseFilePipeline job**
coordinator -> db: **ParseFilePipeline job**\n update status: **Success**\n update job result: dataSourceId


@enduml
